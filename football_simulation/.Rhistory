cat("<Row", i, "contains negative value>\n" )
}
if(sum(a)<17){
cat("there is too many negative num in\n")
break
}
}
for(i in nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
return(cat("the mean of row",i,"is", mean(my.data[i,]), "\n" ))
}
if(sum(a)<=17){
return(cat("<Row", i, "contains negative value>\n" ))
}
if(sum(a)<17){
return(cat("there is too many negative num in\n"))
break
}
}
for(i in nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
return(cat("the mean of row",i,"is", mean(my.data[i,]), "\n" ))
}
if(sum(a)<=17){
return(cat("<Row", i, "contains negative value>\n" ))
}
if(sum(a)<17){
return(cat("there is too many negative num in\n"))
break
}
}
for(i in nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
return(cat("the mean of row",i,"is", mean(my.data[i,]), "\n" ))
}
if(sum(a)<=17){
return(cat("<Row", i, "contains negative value>\n" ))
}
if(sum(a)<17){
return(cat("there is too many negative num in\n"))
break
}
}
for(i in nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
return(cat("the mean of row",i,"is", mean(my.data[i,]), "\n" ))
}
if(sum(a)<=17){
return(cat("<Row", i, "contains negative value>\n" ))
}
if(sum(a)<17){
return(cat("there is too many negative num in\n"))
break
}
}
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
return(cat("the mean of row",i,"is", mean(my.data[i,]), "\n" ))
}
if(sum(a)<=17){
return(cat("<Row", i, "contains negative value>\n" ))
}
if(sum(a)<17){
return(cat("there is too many negative num in\n"))
break
}
}
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(sum(a)<=17){
cat("<Row", i, "contains negative value>\n" )
}
if(sum(a)<17){
cat("there is too many negative num in\n")
break
}
}
nrow(my.data)
my.data[3,] > 0
b <- my.data[3,] > 0
sum(b)
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(sum(a)>17){
cat("<Row", i, "contains negative value>\n" )
}
if(sum(a)<=17){
cat("there is too many negative num in\n")
break
}
}
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(sum(a)>17 & sum(a)<20){
cat("<Row", i, "contains negative value>\n" )
}
if(sum(a)<=17){
cat("there is too many negative num in\n")
break
}
}
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(sum(a)<20 & sum(a)>17){
cat("<Row", i, "contains negative value>\n" )
}
if(sum(a)<=17){
cat("there is too many negative num in\n")
break
}
}
?ifelse
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(sum(a)<20 & sum(a)>17){
cat("<Row", i, "contains negative value>\n" )
}
else(sum(a)<=17){
cat("there is too many negative num in\n")
break
}
}
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(sum(a)<20 & sum(a)>17){
cat("<Row", i, "contains negative value>\n" )
}
else(sum(a)<=17){
cat("there is too many negative num in\n")
break
}
}
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(sum(a)<20 & sum(a)>17){
cat("<Row", i, "contains negative value>\n" )
}
else(sum(a)<=17){
cat("there is too many negative num in\n")
break
}
}
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(sum(a)<20 & sum(a)>17){
cat("<Row", i, "contains negative value>\n" )
}
if(sum(a)<=17){
cat("there is too many negative num in\n")
break
}
}
for(i in 1:nrow(my.data)){
a <- my.data[i,] > 0
if(sum(a)==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(sum(a)<20 & sum(a)>17){
cat("<Row", i, "contains negative value>\n" )
}
if(sum(a)<=17){
cat("there is too many negative num in\n")
break
}
}
a <- 0
count.negative <- 0
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>17){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=17){
cat("there is too many negative num in\n")
break
}
}
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>17){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=17){
cat("there is too many negative num in\n")
break()
}
}
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>18){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=17){
cat("there is too many negative num in\n")
break()
}
}
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>18){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=17){
cat("there is too many negative num in\n")
break
}
}
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>18){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=17){
break
cat("there is too many negative num in\n")
}
}
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>18){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=17)break{
break
cat("there is too many negative num in\n")
}
}
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>18){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=17){
break
cat("there is too many negative num in\n")
}
}
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>18){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=17){
cat("there is too many negative num in\n")
break
}
}
sum(my.data[14,]>0)
my.data[14,]>0
sum(my.data[14,]<0)
sum(my.data[1,]<0)
sum(my.data[1,]>0)
set.seed(1786)
data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow=100))
index1.temp <- sample(1:100,10)
index2.temp <- sample(1:20, 10)
for(i in 1:10){
data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1
}
my.data <- data.exercise.3.1
head(my.data)
head(my.data,14)
set.seed(1786)
data.exercise.3.1<-exp(matrix(rnorm(2000),nrow=100))
index1.temp<-sample(1:100,10)
index2.temp<-sample(1:20,10)
for(i in 1:10){
data.exercise.3.1[index1.temp[i],index2.temp[i]]<--1
}
my.data <- data.exercise.3.1
head(my.data,14)
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>18){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=17){
cat("there is too many negative num in\n")
break
}
}
for(i in 1:nrow(my.data)){
count.negative <- sum(my.data[i,] > 0)
if(count.negative==20){
cat("the mean of row",i,"is", mean(my.data[i,]), "\n" )
}
if(count.negative<20 & count.negative>19){
cat("<Row", i, "contains negative value>\n" )
}
if(count.negative<=19){
cat("there is too many negative num in\n")
break
}
}
k <- 10
y <- matrix(rnorm(k^2), nrow=k)
z <- 0*y
#loop:
time1 <- as.numeric(Sys.time())
for(i in 1:k)
#loop:
for(j in 1:k){
z[i,j] <- y[i,j]^2
}
time2 <- as.numeric(Sys.time())
# using object form in R:
time3 <- as.numeric(Sys.time())
# using object form in R:
z <- y^2
time4 <- as.numeric(Sys.time())
# run time increase factor
(tim2-time1)/(time4-time3)
(time2-time1)/(time4-time3)
library(ggplot2)
library(dplyr)
setwd("C:/Users/biranjan/OneDrive/Aalot_courses/Year-2/Simulation/Project/test")
Season_2015 <- read.csv("2015-16.csv", stringsAsFactors = FALSE) %>%
select("Home.Team"=HomeTeam,"Away.Team"=AwayTeam,
"Home.Goal"=FTHG,"Away.Goal"=FTAG)
head(Season_2015)
regression_model <- data.frame(Team=c(Season_2015$Home.Team,Season_2015$Away.Team),
Opponent = c(Season_2015$Away.Team,Season_2015$Home.Team),
Goals = c(Season_2015$Home.Goal,Season_2015$Away.Goal),
Home = c(rep(1,nrow(Season_2015)),rep(0,nrow(Season_2015))),
stringsAsFactors = FALSE)
# Fromulating Regression model and obtainng parameters
head(regression_model)
Parameters <- function(x) {
model = glm(Goals ~ 0+Team+Opponent+Home,family=poisson,data=x)
coeff = coefficients(model)
teams = sort(unique(c(x[,1],x[,2])), decreasing = F)
num = length(teams)
home.parm = as.numeric(coeff[40])
parameter = data.frame(row.names = make.names(teams),
Attack = c(coeff[(1:num)]),
Defense = c(0,coeff[(num+1):(2*num-1)]))
return(list(teams=parameter,home=home.parm))
}
parameter <- Parameters(regression_model)
a = glm(Goals ~ 0+Team+Opponent+Home,family=poisson,data=regression_model)
a
parameter
game_result <- function(hometeam,awayteam){
H = deparse(substitute(hometeam))
A = deparse(substitute(awayteam))
h.attack = parameter$teams[H,1]
h.defense = parameter$teams[H,2]
a.attack = parameter$teams[A,1]
a.defense = parameter$teams[A,2]
home.parm = parameter$home
hometeam_lam = exp(h.attack+a.defense+home.parm)
awayteam_lam = exp(a.attack+h.defense)
h_goal_sim = rpois(1000,hometeam_lam)
a_goal_sim = rpois(1000,awayteam_lam)
cat("Expected Goal by",H,"is ",hometeam_lam,
"\nExpected Goal by",A,"is ",round(awayteam_lam,5))
h.goal = rpois(1,hometeam_lam)
a.goal = rpois(1,awayteam_lam)
cat("\n In this game ",H," scored ",h.goal, "\nAnd ",A,"scored ",a.goal)
homewin = sum(h_goal_sim>a_goal_sim)/1000
awaywin = sum(a_goal_sim>h_goal_sim)/1000
draw_game = sum(a_goal_sim==h_goal_sim)/1000
game_wheel = c("homewin"=homewin,"awaywin"=awaywin,"Draw"=draw_game)
pie(game_wheel,cex=0.8,col=c("green","yellow","blue"))
cat("\n Based on the Simulation \nProbability of",H,"winning is=",homewin,
"\nProbability of ",A,"winning is= ",awaywin,
"\nProbability of draw is= ",draw_game)
graph_sim =data.frame(dens=c(h_goal_sim,a_goal_sim),
lines = rep(c(H,A),each=1000))
ggplot(graph_sim,aes(x=dens,fill=lines))+geom_histogram(alpha=0.5,binwidth = 1)+xlab("Goal")+facet_grid(.~lines)
}
# For game betwee Arsenal Vs Wolves at Arsenal home ground
game_result(Arsenal,Tottenham)
game_result <- function(hometeam,awayteam){
H = deparse(substitute(hometeam))
A = deparse(substitute(awayteam))
h.attack = parameter$teams[H,1]
h.defense = parameter$teams[H,2]
a.attack = parameter$teams[A,1]
a.defense = parameter$teams[A,2]
home.parm = parameter$home
hometeam_lam = exp(h.attack+a.defense+home.parm)
awayteam_lam = exp(a.attack+h.defense)
h_goal_sim = rpois(1000,hometeam_lam)
a_goal_sim = rpois(1000,awayteam_lam)
cat("Expected Goal by",H,"is ",hometeam_lam,
"\nExpected Goal by",A,"is ",round(awayteam_lam,5))
h.goal = rpois(1,hometeam_lam)
a.goal = rpois(1,awayteam_lam)
cat("\n In this game ",H," scored ",h.goal, "\nAnd ",A,"scored ",a.goal)
homewin = sum(h_goal_sim>a_goal_sim)/1000
awaywin = sum(a_goal_sim>h_goal_sim)/1000
draw_game = sum(a_goal_sim==h_goal_sim)/1000
game_wheel = c("homewin"=homewin,"awaywin"=awaywin,"Draw"=draw_game)
pie(game_wheel,cex=0.8,col=c("green","yellow","blue"))
cat("\n Based on the Simulation \nProbability of",H,"winning is=",homewin,
"\nProbability of ",A,"winning is= ",awaywin,
"\nProbability of draw is= ",draw_game)
graph_sim =data.frame(dens=c(h_goal_sim,a_goal_sim),
lines = rep(c(H,A),each=1000))
ggplot(graph_sim,aes(x=dens,fill=lines))+geom_histogram(alpha=0.5,binwidth = 1)+xlab("Goal")+facet_grid(.~lines)
}
# For game betwee Arsenal Vs Wolves at Arsenal home ground
game_result(Arsenal,Tottenham)
Season_2016 <- read.csv("2016_2017.csv", stringsAsFactors = FALSE) %>%
select("Home.Team"=HomeTeam,"Away.Team"=AwayTeam,
"Home.Goal"=FTHG,"Away.Goal"=FTAG)
regression_model1 <- data.frame(Team=c(Season_2016$Home.Team,Season_2016$Away.Team),
Opponent = c(Season_2016$Away.Team,Season_2016$Home.Team),
Goals = c(Season_2016$Home.Goal,Season_2016$Away.Goal),
Home = c(rep(1,nrow(Season_2016)),rep(0,nrow(Season_2016))),
stringsAsFactors = FALSE)
# Fromulating Regression model and obtainng parameters
# See new parameteres
a = glm(Goals ~ 0+Team+Opponent+Home,family=poisson,data=regression_model1)
a
parameter <- Parameters(regression_model1)
parameter
game_result(West.Ham,Arsenal) # Its pretty close last time they played they had draw
m <- leaflet() %>% setView(lng = -71.0589, lat = 40.3601, zoom = 11)
shiny::runApp('C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation')
runApp('C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation')
runApp('C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation')
runApp('C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation')
runApp('C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation')
runApp('C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation')
runApp('C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation')
runApp('C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation')
runApp('C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation')
a <- c(5,4,2,4,4,2,4,3,5,2,4,4)
length(a)
mean(a)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='biranjan', token='D07A67227FD730CC6C621746E542F36A', secret='thFAuFlGk+lH8C+8rX/6YVF65jBeHmH+kt4Jjvfr')
gwtwd()
getwd()
setwd("C:/Users/biranjan/OneDrive/R/Apps/premier_league_simulation/football_simulation")
library(resconncet)
library(rsconncet)
library(rsconnect)
rsconnect::deployApp()
?rsconnect
.rs.restartR()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
